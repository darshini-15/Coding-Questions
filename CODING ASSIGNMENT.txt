CODING QUESTIONS

1). Check if a Number is Positive or Negative in Java

=>  package com.statements;
import java.util.Scanner;
public class Assignment {
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		System.out.println("Enter a number");
		double number = scanner.nextDouble();
		
		if(number>0) {
		System.out.println("The number is positive");
		} else if (number < 0) {
			System.out.println("The number is negatve");
		}
		else {
			System.out.println("The number is 0");
		}
		
		scanner.close();
	}

}

OUTPUT

Enter a number
55
The number is Positive

Enter a number
-7
The number is Negative

2). Check Whether a Number is Even or Odd in Java

=> package com.statements;

public class Assignment {
	
	public static void main(String[] args) {
		int number = 65;
		
		if(number%2==0) {
			System.out.println("The number is even");
		} else {
			System.out.println("The number is odd");
		}
	}
}

OUTPUT

The number is odd

3). Find the Sum of First N Natural Numbers in Java

=> package com.statements;
import java.util.Scanner;
public class Assignment {
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		System.out.println("Enter a number");
		int N = scanner.nextInt();
		
	int sum =0;
	for(int i=1;i<=N;i++) {
		sum +=i;
		
	}
	System.out.println("The sum of the first"+ N + "natural number is"+sum);
	scanner.close();
	}
}

OUTPUT
Enter a number
4
The sum of first four natural number is 10.

4). Find the Greatest of the Two Numbers in Java

=> package com.statements;
import java.util.Scanner;
public class Assignment {
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		System.out.println("Enter the first number");
		int number1 = scanner.nextInt();
		
		System.out.println("Enter the second number");
		int number2 = scanner.nextInt();
		
		if(number1 > number2) {
			System.out.println("The greatest number is"+ number1);
		} else {
			System.out.println("The greatest number is"+ number2);
		}
	
scanner.close();
	}
}

OUTPUT

Enter the first number
33
Enter the second number
89
The greatest number is 89

5) .Find the Sum of the Numbers in a Given Interval in Java

=>package com.statements;
import java.util.Scanner;
public class Assignment {
	public static void main(String[] args) {
	Scanner scanner = new Scanner(System.in);
	System.out.println("Enter the starting number of the interval");
	int start = scanner.nextInt();
	System.out.println("Enter the ending number of the interval");
	int end = scanner.nextInt();
	
	if(start > end) {
		System.out.print("Error:Starting number must be lesser or equal to the ending number");
		return;	
	} 
	int sum = 0;
	for(int i=start;i<=end;i++) {
		sum +=i;
	}
	System.out.println("The sum of numbers"+start+"to"+end+"is"+sum);
	scanner.close();
	}
}

OUTPUT
Enter the starting number of the interval
13
Enter the ending number of the interval
29
The sum of number from 13to29 is 357

6) Find the Greatest of the Three Numbers in Java
=>package com.statements;
import java.util.Scanner;

public class Assignment {
	public static void main(String[] args) {
	
	Scanner scanner = new Scanner(System.in);
	System.out.println("Enter the number A ");
	int A= scanner.nextInt();
	System.out.println("Enter the number B ");
	int B= scanner.nextInt();
	System.out.println("Enter the number C");
	int C= scanner.nextInt();
	
	scanner.close();
	
	if(A>=B && A>=C) {
		System.out.println("A  is the greatest number.");
	} else if(B>=A && B>=C) {
		System.out.println("B is te greatest number");
	} else  {
		System.out.println("C is the greatest number");
		}
	}
}
OUTPUT
Enter the number A
78
Enter the number B
67
Enter the number C
45
A is the greatest number

7). Check Whether or Not the Year is a Leap Year in Java
=> package com.statements;
import java.util.Scanner;
public class Assignment {
	
		public static void leapYear(int year) {
			if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
				System.out.println("Leap Year");
			} else {
				System.out.println("Not a Leap Year");
			}
		}

		public static void main(String[] args) {
			Scanner sc = new Scanner(System.in);

			System.out.print("Enter the year: ");
			int year = sc.nextInt();

			sc.close();

			leapYear(year);
		}
}
OUTPUT
=> Enter the year:2024
Leap Year

8).Write a program to check if a given number is prime or not in java
=> package com.statements;

import java.util.Scanner;

public class Assignment{

	public static void primeNumber(int n) {

		boolean isPrime = true;
		if (n <= 1) {
			System.out.println("Not Prime Number");
			return;
		}
		for (int i = 2; i < n; i++) {
			if (n % i == 0) {
				isPrime = false;
				break;
			}
		}
		if (isPrime == true) {
			System.out.println("Prime Number");
		} else {
			System.out.println("Not a Prime Number");
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.print("Enter a number: ");
		int num = sc.nextInt();

		sc.close();

		primeNumber(num);

	}

}
OUTPUT
=> Enter a number 8
Not a prime number

9). Find all the Prime Numbers in a Given Interval in Java
=> package com.statements;

import java.util.Scanner;

public class Assignment{

public static void primeInIntervals(int start, int end) {
		
		System.out.println("Prime Numbers from " + start + " to " + end );
		for(int num=start; num<=end; num++) {
			boolean isPrime = true;
			for(int i=2; i<num; i++) {
				if(num%i == 0) {
					isPrime = false;
					break;
				}
			}
			if(isPrime) {
				System.out.print(num + " ");
			}
		}
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter the start number: ");
		int num1 = sc.nextInt();
		
		System.out.print("Enter the end number: ");
		int num2 = sc.nextInt();
		
		sc.close();
		
		primeInIntervals(num1, num2);
		
	}

}
OUTPUT
Enter the start number:45
Enter the end number:90
Prime Numbers from 45 to 90
47 53 59 61 67 71 73 79 83 89 

10). Find the Sum of the Digits of a Number in Java Language
=> package com.statements;

import java.util.Scanner;

public class Assignment{
		public static void sumOfDigits(int n) {
		int sum = 0;
		while (n > 0) {
			int rem = n % 10;
			sum = sum + rem;
			n = n / 10; 
		}
		System.out.println("Sum of digits: " + sum);
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.print("Enter the digits: ");
		int digits = sc.nextInt();

		sc.close();

		sumOfDigits(digits);

	}

}
OUTPUT
=> Enter the digits: 343434
Sum of digits: 21

11). Find the Reverse of a number
=> package com.statements;

import java.util.Scanner;

public class Assignment{
public static void reverseNumber(int n) {
		
		int rev = 0;
		while(n > 0) {
			rev = rev*10 + n%10;
			n = n/10;
		}
		System.out.println("Reversed Number: " + rev);
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter number without spaces: ");
		int num = sc.nextInt();
		
		sc.close();
		
		reverseNumber(num);
		
		

	}

}
OUTPUT
Enter number without spaces: 45678
Reversed Number: 87654

12). Find the Palindrome number
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static void palindromeNumber(int n) {

		int rev = 0;
		int originalNumber = n;
		while (n > 0) {
			rev = rev * 10 + n % 10;
			n = n / 10;
		}
		if (rev == originalNumber) {
			System.out.println("Palindrome Number");
		} else {
			System.out.println("Not a Palindrome Number");
		}
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.print("Enter a number: ");
		int num = sc.nextInt();
		
		sc.close();

		palindromeNumber(num);

	}

OUTPUT
Enter a number: 12321
Palindrome Number

13).Find the Armstrong number
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static void armStrongNumber(int n) {

		int temp = n, sum = 0;
		while (temp > 0) {
			int rem = temp % 10;
			sum = sum + (rem * rem * rem);
			temp = temp / 10;
		}
		if (n == sum) {
			System.out.println("ArmStrong Number");
		} else {
			System.out.println("Not a ArmStrong Number");
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.print("Enter three digit number: ");
		int num = sc.nextInt();

		sc.close();

		armStrongNumber(num);

	}

}
OUTPUT
Enter three digit number: 153
ArmStrong Number

14). Find all Armstrong number in a given rangeÂ 
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static boolean isArmstong(int num) {

		
		int temp = num;
		int count = 0, rem;
		while (temp > 0) {
			rem = temp % 10;
			count++;
			temp /= 10;
		}

		//Armstrong logic
		temp = num;
		double sum = 0;
		while (temp > 0) {
			rem = temp % 10;
			sum = sum + Math.pow(rem, count);
			temp /= 10;
		}

		
		if (sum == num) {
			return true;
		} else {
			return false;
		}

	}

	public static void armstrongGivenRange(int start, int end) {

		System.out.println("Armstrong Number from the range " + start + " to " + end);
		for (int i = start; i <= end; i++) {
			if (isArmstong(i)) {
				System.out.print(i + " ");
			}
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.print("Enter the start number (from 100): ");
		int num1 = sc.nextInt();

		System.out.print("Enter the end number: ");
		int num2 = sc.nextInt();

		sc.close();

		armstrongGivenRange(num1, num2);

	}

}
OUTPUT
=> Enter the start number (from 100): 120
Enter the end number: 500
Armstrong Number from the range 120 to 500
153 370 371 407 

15). Fibonacci Series uptoÂ nthÂ term
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static int fibonacciSeries(int n) {
		if(n == 0 || n == 1) {
			return n;
		}
		else {
			return fibonacciSeries(n-1) + fibonacciSeries(n-2);
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner (System.in);
		
		System.out.print("Enter the number of terms for the Fibonacci Series: ");
		int num = sc.nextInt();
		
		sc.close();
		
		fibonacciSeries(num);
		System.out.println("Fibonacci Series up to: " + num);
		for(int i=0; i<=num; i++) {
			System.out.print(fibonacciSeries(i) + " ");
		}

	}

}
OUTPUT
Enter the number of terms for the Fibonacci Series: 8
Fibonacci Series up to: 8
0 1 1 2 3 5 8 13 21 

16). Find theÂ NthÂ Term of the Fibonacci Series
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static int nthFibonacciTerm(int n) {
		if(n == 0 || n == 1) {
			return n;
		} else {
			return nthFibonacciTerm(n-1) + nthFibonacciTerm(n-2);
		}
	}
	public static int fibonacciAlgorithm(int n) {
		if(n <= 0) {
			return 0;
		}
		else if(n == 0) {
			return 1;
		}
		else if(n == 1) {
			return 2;
		}
		else {
			int a=0, b=1, temp = 0;
			for(int i=3; i<=n; i++) {
				temp = a + b;
				a = b;
				b = temp;
			}
			return temp;
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter the value of N to find the Nth Fibonacci term: ");		
		int num = sc.nextInt();
		
		sc.close();
		
		int result = nthFibonacciTerm(num);
		System.out.println("Nth Fibonacci term is: " + result);

	}

}

OUTPUT
Enter the value of N to find the Nth Fibonacci term: 7
Nth Fibonacci term is: 13

17). Factoria of a number
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static int calcFactorial(int fact) {
		if(fact == 0 || fact == 1) {
			return fact;
		}
		else {
			return fact * calcFactorial(fact - 1);
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter a number for its factorial: ");
		int num = sc.nextInt();
		
		sc.close();
		
		int result = calcFactorial(num);
		System.out.format("The factorial of %d is: %d",num, result);

	}

}
OUTPUT
Enter a number for its factorial: 6
The factorial of 6 is: 720

18).Power of a numberÂ 
=> package com.statements;

import java.util.Scanner;

public class Assignment{
public static void calcPower(int base, int power) {
		
		int result = 1;
		for(int i=1; i<=power; i++) {
			result = result * base;
		}
		System.out.println(result);
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter the base number: ");
		int base = sc.nextInt();
		
		System.out.print("Enter the exponent number: ");
		int power = sc.nextInt();
		
		sc.close();	
		
		calcPower(base, power);
		

	}

}
OUTPUT
Enter the base number: 7
Enter the exponent number: 3
343

19).Factor of a number
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static void factorsOfNumber(int num) {
		System.out.println("Factors of the number are: ");
		for(int i=1; i<=num; i++) {
			if(num%i == 0) {
				System.out.print(i  + " ");
			}
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter a number: ");
		int num = sc.nextInt();
		
		sc.close();
		
		factorsOfNumber(num);

	}

}
OUTPUT
Enter a number: 36
Factors of the number are: 
1 2 3 4 6 9 12 18 36 

20). Strong number (sum of factorial of digits is equals to number itself)
=> public static int fact(int n) {
		if(n==1) {
			return 1;
		}
		return n*fact(n-1);
	}
	public static boolean isStrong(int n) {
		int res=0;
		int temp=n;
		while(n>0) {
			res+=fact(n%10);
			n=n/10;
		}
		
		return res==temp;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n;
		System.out.println("Enter the number: ");
		n=sc.nextInt();
		if(isStrong(n)) {
			System.out.println(n+" is a strong number");
		}
		else {
			System.out.println(n+" is not a strong number");
		}
		sc.close();
	}

}
OUTPUT
Enter the number: 
145
145 is a strong number

21) .Perfect number (a positive integer that is equal to the sum of its proper divisors)
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static boolean isPerfect(int n) {
		int res=0;
		for(int i=1;i<n;i++) {
			if(n%i==0) {
				res+=i;
			}
		}
		return res==n;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n;
		System.out.println("Enter the number: ");
		n=sc.nextInt();
		if(isPerfect(n)) {
			System.out.println(n+" is a perfect number");
		}
		else {
			System.out.println(n+" is not a perfect number");
		}
		sc.close();

	}

}
OUTPUT
Enter the number: 
23
23 is not a perfect number

22). Perfect Square (A perfect square is a positiveÂ integerÂ that is obtained by multiplying an integer by itself)                         
=> package com.statements;

import java.util.Scanner;

public class Assignment{

	public static boolean isPerfectSquare(int n) {
		for(int i=1;i<=n/2;i++) {
			if(i*i==n) {
				return true;
			}
		}
		return false;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n;
		System.out.println("Enter the number:");
		n=sc.nextInt();
		if(isPerfectSquare(n))System.out.println(n+" is a perfect square");
		else System.out.println(n+" is not a perfect square");
		sc.close();
	}

}
OUTPUT
Enter the number:
225
225 is a perfect square

23).Harshad number(number which is divisible by the sum of its digits)
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static int sumofDigits(int n) {
		int res=0;
		while(n>0) {
			res+=n%10;
			n/=10;
		}
		return res;
	}
	public static boolean isHarshad(int n) {
		int sum=sumofDigits(n);
		return n%sum==0;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n;
		System.out.println("Enter the number: ");
		n=sc.nextInt();
		if(isHarshad(n))System.out.println(n+" is a Harshad number");
		else System.out.println(n+" is not a Harshad number");
		sc.close();
	}

}
OUTPUT
Enter the number: 
45
45 is a Harshad number

24). Abundant number(If the sum of all its proper divisors, denoted by sum(n), is greater than the number's value)
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static int sum(int n) {
		int res=0;
		for(int i=1;i<n;i++) {
			if(n%i==0)res+=i;
		}
		return res;
	}
	public static boolean isAbundant(int n) {
		int sum=sum(n);
		return sum>n;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n;
		System.out.println("Enter the number: ");
		n=sc.nextInt();
		if(isAbundant(n))System.out.println(n+" is a abundant number");
		else System.out.println(n+" is not a abundant number");
		sc.close();
	}

}

OUTPUT
Enter the number: 
75
75 is not a abundant number

25). Friendly pair(, the ratio between the sum ofÂ divisorsÂ of a number and the number itself.)
=> package com.statements;

import java.util.Scanner;

public class Assignment{
	public static int factorsum(int n) {
		int res=0;
		for(int i=1;i<=n;i++) {
			if(n%i==0) {
				res+=i;
			}
		}
		return res;
	}
	public static int getratio(int a) {
		int fsum=factorsum(a);
		return fsum/a;
	}
	public static boolean isFriendlypair(int a,int b) {
		int x=getratio(a);
		int y=getratio(b);
		return x==y;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int a,b;
		System.out.println("Enter the first number: ");
		a=sc.nextInt();
		System.out.println("Enter the second number: ");
		b=sc.nextInt();
		if(isFriendlypair(a,b)) {
			System.out.println(a+" and "+b+" are friendly pairs");
		}
		else {
			System.out.println(a+" and "+b+" are not friendly pairs");
		}
		sc.close();
	}

}

OUTPUT
Enter the first number: 
6
Enter the second number: 
28
6 and 28 are friendly pairs



		
